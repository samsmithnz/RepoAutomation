name: 'CI/ CD'

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  #Install and calculate the new version with GitVersion  
  versionAndTest:
    runs-on: windows-latest
    outputs: 
      Version: ${{ steps.gitversion.outputs.SemVer }} 
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}  
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.0
      with:
        versionSpec: 5.x
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3.0.0
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/RepoAutomation.Tests/appsettings.json'
      env:
        AppSettings.GitHubClientId: "${{ secrets.GitHubClientId }}"
        AppSettings.GitHubClientSecret: "${{ secrets.GitHubClientSecret }}" 
    - name: .NET test
      run: dotnet test src/RepoAutomation.Tests/RepoAutomation.Tests.csproj -c Debug -e:CollectCoverage=true -e:CoverletOutput=TestResults/ -e:CoverletOutputFormat=lcov #-l:"trx;LogFileName=${{ github.workspace }}/TestOutput.xml" 
    #- uses: samsmithnz/DotNetTestResults@0.1.3
    #  if: false
    #  with:
    #    fileName: ${{ github.workspace }}/TestOutput.xml
    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: src/RepoAutomation.Tests/TestResults/coverage.info

  build:
    runs-on: ${{matrix.os}}
    needs: versionAndTest
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        #include:
        #- ChannelName: Windows_x64
        #  RID: win-x64
        #- ChannelName: MacOS_x64
        #  RID: osx-x64
        #- ChannelName: Linux_x64
        #  RID: linux-x64
    env:
      BuildConfiguration: Release
    outputs: # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}  
    steps:
    - uses: actions/checkout@v4   
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    #- name: Create directory for channel
    #  run: mkdir ${{ github.workspace }}\${{ matrix.ChannelName }}
    #  shell: powershell
    #- name: dotnet publish ${{ matrix.RID }}
    #  run: dotnet publish '.\src\RepoAutomation\RepoAutomation.csproj' -r ${{ matrix.RID }} --self-contained -c ${{ env.BuildConfiguration }} -o ${{ github.workspace }}\${{ needs.versionAndTest.outputs.Version }}_${{ matrix.ChannelName }} /p:Version=${{ needs.versionAndTest.outputs.Version }}
    #- name: zip files
    #  run: |
    #    Compress-Archive -Path '${{ github.workspace }}\${{ needs.versionAndTest.outputs.Version }}_${{ matrix.ChannelName }}\' `
    #    -DestinationPath ${{ github.workspace }}\${{ matrix.ChannelName }}\RepoAutomation.${{ matrix.ChannelName }}.${{ needs.versionAndTest.outputs.Version }}.zip
    #  shell: powershell
    #- name: Publish Artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: ${{ matrix.ChannelName }}
    #    path: ${{ github.workspace }}\${{ matrix.ChannelName }}    
    #Pack the code into a NuGet package
    - name: .NET pack
      if: runner.OS == 'Linux' #Only pack the Linux nuget package
      run: dotnet pack src/RepoAutomation.Core/RepoAutomation.Core.csproj -c Release --nologo --include-symbols -p:Version='${{ needs.versionAndTest.outputs.Version }}'
    - name: Upload nuget package back to GitHub
      uses: actions/upload-artifact@v4
      if: runner.OS == 'Linux' #Only pack the Linux nuget package
      with:
        name: nugetPackage
        path: src/RepoAutomation.Core/bin/Release  
        
        
  sonarCloud:
    name: Run SonarCloud analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    steps:
      - name: Run Sonarcloud test
        uses: samsmithnz/SamsDotNetSonarCloudAction@v2.1
        with:
          projects: 'src/RepoAutomation/RepoAutomation.csproj,src/RepoAutomation.Core/RepoAutomation.Core.csproj,src/RepoAutomation.Tests/RepoAutomation.Tests.csproj'
          dotnet-version: '8.0.x'
          sonarcloud-organization: samsmithnz-github
          sonarcloud-project: samsmithnz_RepoAutomation
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

        
  Release:
    runs-on: ubuntu-latest
    needs: 
    - build
    - versionAndTest
    - sonarCloud
    if: github.ref == 'refs/heads/main'      
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.versionAndTest.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.versionAndTest.outputs.CommitsSinceVersionSource }}" 
    - name: Download package artifacts
      uses: actions/download-artifact@v4
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: needs.versionAndTest.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      with:
        #artifacts: Linux_x64/RepoAutomation.Linux_x64.${{ needs.versionAndTest.outputs.Version }}.zip,MacOS_x64/RepoAutomation.MacOS_x64.${{ needs.versionAndTest.outputs.Version }}.zip,Windows_x64/RepoAutomation.Windows_x64.${{ needs.versionAndTest.outputs.Version }}.zip
        tag: "v${{ needs.versionAndTest.outputs.Version }}"
        name: "v${{ needs.versionAndTest.outputs.Version }}"
        token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    - name: Publish nuget package to nuget.org
      if: needs.versionAndTest.outputs.CommitsSinceVersionSource > 0 #Only publish a NuGet package if there has been a commit/version change
      run: dotnet nuget push nugetPackage\*.nupkg --api-key "${{ secrets.GHPackagesToken }}" --source "https://api.nuget.org/v3/index.json"
      shell: pwsh
